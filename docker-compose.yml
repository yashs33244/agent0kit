version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: agent-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-agent_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agent_password}
      POSTGRES_DB: ${POSTGRES_DB:-agent_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-agent_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agent-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: agent-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agent-network

  # Qdrant Vector Database for chat memory
  qdrant:
    image: qdrant/qdrant:latest
    container_name: agent-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agent-network

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: agent-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-agent_user}:${POSTGRES_PASSWORD:-agent_password}@postgres:5432/${POSTGRES_DB:-agent_db}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Qdrant
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
      
      # AI APIs
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      
      # Twitter
      X_API_KEY: ${X_API_KEY}
      X_API_SECRET_KEY: ${X_API_SECRET_KEY}
      X_ACCESS_TOKEN: ${X_ACCESS_TOKEN}
      X_ACCESS_TOKEN_SECRET: ${X_ACCESS_TOKEN_SECRET}
      X_BEARER_TOKEN: ${X_BEARER_TOKEN:-}
      X_CLIENT_ID: ${X_CLIENT_ID:-}
      X_CLIENT_SECRET: ${X_CLIENT_SECRET:-}
      
      # LinkedIn (optional)
      LINKEDIN_COOKIE: ${LINKEDIN_COOKIE:-}
      
      # Telegram Bots (separate for each agent)
      TELEGRAM_JOB_AGENT_BOT_TOKEN: ${TELEGRAM_JOB_AGENT_BOT_TOKEN}
      TELEGRAM_TWITTER_AGENT_BOT_TOKEN: ${TELEGRAM_TWITTER_AGENT_BOT_TOKEN:-}
      TELEGRAM_GITHUB_AGENT_BOT_TOKEN: ${TELEGRAM_GITHUB_AGENT_BOT_TOKEN:-}
      TELEGRAM_WEB_AGENT_BOT_TOKEN: ${TELEGRAM_WEB_AGENT_BOT_TOKEN:-}
      
      # Telegram Chat IDs
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      
      # Cron Job Times (configurable)
      CRON_JOB_SEARCH: ${CRON_JOB_SEARCH:-0 8,12,18 * * *}
      CRON_TWITTER: ${CRON_TWITTER:-0 8,14,20 * * *}
      CRON_GITHUB: ${CRON_GITHUB:-0 10 * * *}
      CRON_WEB_RESEARCH: ${CRON_WEB_RESEARCH:-0 7 * * *}
      
      # Node
      NODE_ENV: ${NODE_ENV:-production}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - agent-network
    volumes:
      - ./logs:/app/logs
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm run start
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  agent-network:
    driver: bridge

