// Prisma Schema for Agent System
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Chat Conversations
model Conversation {
    id        String   @id @default(cuid())
    userId    String? // Optional user identification
    title     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]
    summary  ConversationSummary?

    @@index([userId])
    @@index([createdAt])
}

// Chat Messages
model Message {
    id             String   @id @default(cuid())
    conversationId String
    role           String // 'user' | 'assistant' | 'system'
    content        String   @db.Text
    toolCalls      Json? // Store tool calls data
    toolResults    Json? // Store tool results
    createdAt      DateTime @default(now())

    conversation Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    embedding    MessageEmbedding?

    @@index([conversationId])
    @@index([createdAt])
}

// Vector embeddings for chat memory
model MessageEmbedding {
    id        String   @id @default(cuid())
    messageId String   @unique
    embedding Float[] // Vector embedding
    createdAt DateTime @default(now())

    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@index([messageId])
}

// Conversation summaries for long context management
model ConversationSummary {
    id             String   @id @default(cuid())
    conversationId String   @unique
    summary        String   @db.Text
    keyTopics      String[] // Array of key topics discussed
    lastUpdated    DateTime @default(now())
    messageCount   Int      @default(0)

    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@index([conversationId])
}

// Agent Definitions
model Agent {
    id          String @id @default(cuid())
    agentId     String @unique // 'ai-job-search', 'twitter-tech-poster', etc.
    name        String
    description String @db.Text
    icon        String
    category    String
    status      String @default("active") // 'active' | 'paused' | 'error'
    schedule    String // Cron expression

    // Environment variables for this agent
    envVars Json? // { TELEGRAM_BOT_TOKEN: 'var_name', etc. }

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    runs AgentRun[]

    @@index([agentId])
    @@index([status])
}

// Agent Run History
model AgentRun {
    id          String    @id @default(cuid())
    agentId     String
    status      String // 'running' | 'success' | 'error'
    startedAt   DateTime  @default(now())
    completedAt DateTime?
    duration    Int? // Duration in milliseconds

    // Results
    response    String? @db.Text
    toolsUsed   Json? // Array of tools used
    toolResults Json? // Detailed tool results
    error       String? @db.Text

    // Metadata
    triggerType String // 'cron' | 'manual' | 'api'
    triggeredBy String? // User ID or system

    agent         Agent               @relation(fields: [agentId], references: [agentId], onDelete: Cascade)
    notifications AgentNotification[]

    @@index([agentId])
    @@index([startedAt])
    @@index([status])
}

// Notifications sent for agent runs
model AgentNotification {
    id       String    @id @default(cuid())
    runId    String
    channel  String // 'telegram' | 'slack' | 'email' | 'whatsapp'
    status   String // 'sent' | 'failed' | 'pending'
    sentAt   DateTime?
    error    String?   @db.Text
    metadata Json? // Channel-specific metadata

    run AgentRun @relation(fields: [runId], references: [id], onDelete: Cascade)

    @@index([runId])
    @@index([status])
}

// Job Search Results Cache (for job agent)
model JobSearchResult {
    id            String  @id @default(cuid())
    searchQuery   String
    jobTitle      String
    company       String
    location      String
    salary        String?
    jobUrl        String  @db.Text
    description   String  @db.Text
    matchScore    Int
    matchedSkills Json // Array of matched skills
    relevance     Json // Relevance factors
    source        String // 'linkedin' | 'naukri' | etc.
    postedDate    String?

    createdAt DateTime @default(now())
    notified  Boolean  @default(false) // Whether user was notified

    @@index([matchScore])
    @@index([createdAt])
    @@index([notified])
}

// User Preferences
model UserPreference {
    id     String @id @default(cuid())
    userId String @unique

    // Notification preferences
    telegram Json? // { chatId, enabled, minMatchScore }
    slack    Json?
    email    Json?
    whatsapp Json?

    // Agent preferences
    cronTimes Json? // { 'ai-job-search': '0 8,12,18 * * *', ... }

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}
